import { useState, useEffect } from "react";
import { Button } from "../ui/button";
import { Card } from "../ui/card";
import { Badge } from "../ui/badge";
import { Separator } from "../ui/separator";
import { 
  Copy, 
  Download, 
  RefreshCw, 
  X, 
  Check,
  ChevronDown,
  FileText,
  Code,
  Sparkles,
  BookOpen,
  Share2,
  Archive,
  MoreVertical
} from "lucide-react";
import { toast } from "sonner@2.0.3";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
  DropdownMenuSeparator,
} from "../ui/dropdown-menu";

interface OutputPanelProps {
  enhancedPrompt: string;
  originalPrompt: string;
  onRefine: () => void;
  onClose: () => void;
  onSaveToArchives?: (prompt: { original: string; enhanced: string; title: string }) => void;
}

export function OutputPanel({ enhancedPrompt, originalPrompt, onRefine, onClose, onSaveToArchives }: OutputPanelProps) {
  const [copied, setCopied] = useState(false);
  const [format, setFormat] = useState<'plain' | 'markdown' | 'json'>('plain');
  const [isVisible, setIsVisible] = useState(false);

  useEffect(() => {
    // Fade-in animation when result loads
    const timer = setTimeout(() => setIsVisible(true), 100);
    return () => clearTimeout(timer);
  }, []);

  const handleCopy = async (content: string, formatName: string) => {
    try {
      await navigator.clipboard.writeText(content);
      setCopied(true);
      toast.success(`Copied as ${formatName}!`);
      setTimeout(() => setCopied(false), 2000);
    } catch (error) {
      toast.error("Failed to copy to clipboard");
    }
  };

  const getFormattedContent = () => {
    switch (format) {
      case 'markdown':
        return `# Enhanced Prompt

## Original
${originalPrompt}

## Enhanced Version
${enhancedPrompt}

*Generated by PromptBrain Temple*`;
      
      case 'json':
        return JSON.stringify({
          original_prompt: originalPrompt,
          enhanced_prompt: enhancedPrompt,
          enhancement_date: new Date().toISOString(),
          format: "temple_enhanced"
        }, null, 2);
      
      case 'plain':
      default:
        return enhancedPrompt;
    }
  };

  const handleCopyFormatted = () => {
    const content = getFormattedContent();
    const formatName = format.charAt(0).toUpperCase() + format.slice(1);
    handleCopy(content, formatName);
  };

  const handleSaveToArchives = () => {
    if (onSaveToArchives) {
      const title = originalPrompt.substring(0, 50) + (originalPrompt.length > 50 ? '...' : '');
      onSaveToArchives({
        original: originalPrompt,
        enhanced: enhancedPrompt,
        title: title
      });
      toast.success("Saved to Archives!");
    }
  };

  const handleExport = () => {
    const exportContent = `# Enhanced Prompt - Temple Wisdom

## Original Prompt
${originalPrompt}

## Enhanced Version
${enhancedPrompt}

## Enhancement Details
- Date: ${new Date().toLocaleDateString()}
- Method: Temple Intelligence Forging
- Status: Sacred Enhancement Complete

---
Generated by PromptBrain Mind Temple
`;

    const blob = new Blob([exportContent], { type: 'text/markdown' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'enhanced-prompt.md';
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
    
    toast.success("Enhanced prompt exported!");
  };

  return (
    <div className={`w-1/2 bg-temple-black border-l border-royal-gold/20 flex flex-col transition-all duration-500 ${
      isVisible ? 'opacity-100 translate-x-0' : 'opacity-0 translate-x-4'
    }`}>
      {/* Header */}
      <div className="p-6 border-b border-royal-gold/10">
        <div className="flex items-center justify-between mb-4">
          <div className="flex items-center space-x-3">
            <div className="w-8 h-8 bg-gradient-to-br from-cyan-glow to-electric-blue rounded-lg flex items-center justify-center">
              <Sparkles className="w-4 h-4 text-temple-black" />
            </div>
            <div>
              <h2 className="text-lg font-medium text-marble-white">Enhanced Output</h2>
              <p className="text-sm text-marble-white/60">Intelligence Successfully Forged</p>
            </div>
          </div>
          <Button
            variant="ghost"
            size="sm"
            onClick={onClose}
            className="hover:bg-marble-white/10 text-marble-white/60 hover:text-marble-white"
          >
            <X className="w-4 h-4" />
          </Button>
        </div>

        {/* Format Selector */}
        <div className="flex items-center space-x-3 mb-4">
          <span className="text-sm text-marble-white/60">Format:</span>
          <div className="flex items-center space-x-1 bg-marble-white/5 rounded-lg p-1">
            {(['plain', 'markdown', 'json'] as const).map((fmt) => (
              <button
                key={fmt}
                onClick={() => setFormat(fmt)}
                className={`px-3 py-1 text-xs rounded transition-all duration-200 ${
                  format === fmt
                    ? 'bg-royal-gold/20 text-royal-gold'
                    : 'text-marble-white/60 hover:text-marble-white hover:bg-marble-white/10'
                }`}
              >
                {fmt === 'plain' ? 'Plain' : fmt === 'markdown' ? 'Markdown' : 'JSON'}
              </button>
            ))}
          </div>
        </div>

        {/* Action Buttons */}
        <div className="flex items-center space-x-2">
          <Button 
            onClick={handleCopyFormatted}
            className="bg-royal-gold/20 hover:bg-royal-gold/30 text-royal-gold border-royal-gold/40"
          >
            {copied ? <Check className="w-4 h-4 mr-2" /> : <Copy className="w-4 h-4 mr-2" />}
            Copy {format.charAt(0).toUpperCase() + format.slice(1)}
          </Button>

          <Button
            variant="outline"
            onClick={handleExport}
            className="border-electric-blue/30 text-electric-blue hover:bg-electric-blue/20"
          >
            <Download className="w-4 h-4 mr-2" />
            Export
          </Button>

          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button
                variant="outline"
                className="border-violet/30 text-violet hover:bg-violet/20"
              >
                <MoreVertical className="w-4 h-4" />
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent className="bg-temple-black border-violet/20">
              <DropdownMenuItem 
                onClick={handleSaveToArchives}
                className="text-marble-white hover:bg-violet/20 cursor-pointer"
              >
                <Archive className="w-4 h-4 mr-2" />
                Save to Archives
              </DropdownMenuItem>
              <DropdownMenuItem 
                disabled
                className="text-marble-white/40 cursor-not-allowed"
              >
                <Share2 className="w-4 h-4 mr-2" />
                Share (Coming Soon)
              </DropdownMenuItem>
              <DropdownMenuSeparator className="bg-marble-white/10" />
              <DropdownMenuItem 
                onClick={onRefine}
                className="text-marble-white hover:bg-violet/20 cursor-pointer"
              >
                <RefreshCw className="w-4 h-4 mr-2" />
                Refine Again
              </DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        </div>
      </div>

      {/* Content */}
      <div className="flex-1 p-6 overflow-y-auto">
        {/* Original Prompt */}
        <div className="mb-6">
          <div className="flex items-center space-x-2 mb-3">
            <Badge variant="outline" className="border-marble-white/30 text-marble-white/70 text-xs">
              Original Input
            </Badge>
          </div>
          <Card className="bg-marble-white/5 border-marble-white/10 p-4">
            <p className="text-marble-white/70 text-sm leading-relaxed">
              {originalPrompt}
            </p>
          </Card>
        </div>

        <Separator className="bg-royal-gold/20 my-6" />

        {/* Enhanced Prompt */}
        <div>
          <div className="flex items-center space-x-2 mb-3">
            <Badge variant="outline" className="border-royal-gold/50 text-royal-gold text-xs">
              Temple Enhanced
            </Badge>
            <Badge variant="outline" className="border-cyan-glow/50 text-cyan-glow text-xs">
              Ready to Use
            </Badge>
          </div>
          <Card className="bg-gradient-to-br from-royal-gold/5 to-electric-blue/5 border-royal-gold/20 p-6">
            <div className="prose prose-sm max-w-none">
              <div className="text-marble-white leading-relaxed">
                {format === 'markdown' ? (
                  <pre className="whitespace-pre-wrap font-mono text-sm bg-temple-black/50 p-4 rounded-lg">
                    {getFormattedContent()}
                  </pre>
                ) : format === 'json' ? (
                  <pre className="whitespace-pre-wrap font-mono text-sm bg-temple-black/50 p-4 rounded-lg text-cyan-glow">
                    {getFormattedContent()}
                  </pre>
                ) : (
                  <div className="whitespace-pre-wrap">
                    {enhancedPrompt}
                  </div>
                )}
              </div>
            </div>
          </Card>
        </div>

        {/* Enhancement Insights */}
        <div className="mt-6">
          <h3 className="text-marble-white font-medium mb-3">Enhancement Insights</h3>
          <div className="grid grid-cols-1 gap-3">
            <div className="bg-marble-white/5 border border-marble-white/10 rounded-lg p-3">
              <div className="flex items-center space-x-2 mb-1">
                <div className="w-2 h-2 bg-royal-gold rounded-full"></div>
                <span className="text-sm text-marble-white/80">Clarity Enhanced</span>
              </div>
              <p className="text-xs text-marble-white/60">
                Added structure and specific instructions for better AI understanding
              </p>
            </div>
            <div className="bg-marble-white/5 border border-marble-white/10 rounded-lg p-3">
              <div className="flex items-center space-x-2 mb-1">
                <div className="w-2 h-2 bg-electric-blue rounded-full"></div>
                <span className="text-sm text-marble-white/80">Context Added</span>
              </div>
              <p className="text-xs text-marble-white/60">
                Included relevant context and constraints for precise output
              </p>
            </div>
            <div className="bg-marble-white/5 border border-marble-white/10 rounded-lg p-3">
              <div className="flex items-center space-x-2 mb-1">
                <div className="w-2 h-2 bg-violet rounded-full"></div>
                <span className="text-sm text-marble-white/80">Format Optimized</span>
              </div>
              <p className="text-xs text-marble-white/60">
                Structured for consistent and actionable responses
              </p>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}