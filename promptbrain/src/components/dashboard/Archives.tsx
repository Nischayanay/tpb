import { useState } from "react";
import { Button } from "../ui/button";
import { Card } from "../ui/card";
import { Badge } from "../ui/badge";
import { Input } from "../ui/input";
import { 
  Search,
  Copy,
  Download,
  Trash2,
  Filter,
  Archive,
  Calendar,
  Zap,
  Brain,
  Check
} from "lucide-react";
import { toast } from "sonner@2.0.3";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "../ui/dropdown-menu";

export interface ArchivedPrompt {
  id: string;
  title: string;
  original: string;
  enhanced: string;
  date: string;
  mode: 'direct' | 'guided';
}

interface ArchivesProps {
  archivedPrompts: ArchivedPrompt[];
  onDeletePrompt?: (id: string) => void;
}

export function Archives({ archivedPrompts, onDeletePrompt }: ArchivesProps) {
  const [searchQuery, setSearchQuery] = useState("");
  const [filterMode, setFilterMode] = useState<'all' | 'direct' | 'guided'>('all');
  const [copiedId, setCopiedId] = useState<string | null>(null);

  const filteredPrompts = archivedPrompts.filter(prompt => {
    const matchesSearch = prompt.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
                         prompt.original.toLowerCase().includes(searchQuery.toLowerCase()) ||
                         prompt.enhanced.toLowerCase().includes(searchQuery.toLowerCase());
    const matchesFilter = filterMode === 'all' || prompt.mode === filterMode;
    return matchesSearch && matchesFilter;
  });

  const handleCopy = async (content: string, promptId: string) => {
    try {
      await navigator.clipboard.writeText(content);
      setCopiedId(promptId);
      toast.success("Copied to clipboard!");
      setTimeout(() => setCopiedId(null), 2000);
    } catch (error) {
      toast.error("Failed to copy to clipboard");
    }
  };

  const handleExport = (prompt: ArchivedPrompt) => {
    const exportContent = `# Archived Prompt - ${prompt.title}

## Original Prompt
${prompt.original}

## Enhanced Version
${prompt.enhanced}

## Details
- Date: ${prompt.date}
- Mode: ${prompt.mode === 'direct' ? 'Direct Zone' : 'Flow Mode'}
- Method: Temple Intelligence Forging

---
Generated by PromptBrain Mind Temple
`;

    const blob = new Blob([exportContent], { type: 'text/markdown' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `archived-prompt-${prompt.id}.md`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
    
    toast.success("Archived prompt exported!");
  };

  const handleDelete = (id: string) => {
    if (onDeletePrompt) {
      onDeletePrompt(id);
      toast.success("Prompt deleted from archives");
    }
  };

  if (archivedPrompts.length === 0) {
    return (
      <div className="flex items-center justify-center h-full">
        <div className="text-center max-w-md">
          {/* Mystical Empty State */}
          <div className="w-24 h-24 bg-gradient-to-br from-royal-gold/10 to-violet/10 rounded-full flex items-center justify-center mx-auto mb-6 relative">
            <Archive className="w-10 h-10 text-royal-gold/60" />
            <div className="absolute inset-0 rounded-full bg-gradient-to-br from-royal-gold/5 to-violet/5 animate-pulse"></div>
          </div>
          <h2 
            className="text-xl font-light text-royal-gold mb-3"
            style={{ fontFamily: '"Playfair Display", "Georgia", serif' }}
          >
            Sacred Archives Await
          </h2>
          <p className="text-marble-white/60 leading-relaxed">
            Nothing forged yet, start creating âš¡
          </p>
          <p className="text-marble-white/40 text-sm mt-2">
            Your enhanced prompts will appear here once saved from the Output Zone.
          </p>
        </div>
      </div>
    );
  }

  return (
    <div className="w-full h-full p-8 overflow-y-auto">
      {/* Header */}
      <div className="mb-8">
        <h1 
          className="text-3xl font-light text-royal-gold mb-3 temple-glow"
          style={{ fontFamily: '"Playfair Display", "Georgia", serif' }}
        >
          Sacred Archives
        </h1>
        <p className="text-marble-white/70">
          Your enhanced prompts, preserved for eternity
        </p>
      </div>

      {/* Filters and Search */}
      <div className="flex items-center space-x-4 mb-8">
        <div className="flex-1 relative">
          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-marble-white/40" />
          <Input
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            placeholder="Search your sacred collection..."
            className="pl-10 bg-input-background/50 border-royal-gold/20 focus:border-royal-gold/50 text-marble-white placeholder:text-marble-white/40"
          />
        </div>
        
        <DropdownMenu>
          <DropdownMenuTrigger asChild>
            <Button 
              variant="outline"
              className="border-royal-gold/30 text-royal-gold hover:bg-royal-gold/20"
            >
              <Filter className="w-4 h-4 mr-2" />
              {filterMode === 'all' ? 'All Modes' : filterMode === 'direct' ? 'Direct Zone' : 'Flow Mode'}
            </Button>
          </DropdownMenuTrigger>
          <DropdownMenuContent className="bg-temple-black border-royal-gold/20">
            <DropdownMenuItem 
              onClick={() => setFilterMode('all')}
              className="text-marble-white hover:bg-royal-gold/20 cursor-pointer"
            >
              All Modes
            </DropdownMenuItem>
            <DropdownMenuItem 
              onClick={() => setFilterMode('direct')}
              className="text-marble-white hover:bg-royal-gold/20 cursor-pointer"
            >
              <Zap className="w-4 h-4 mr-2" />
              Direct Zone
            </DropdownMenuItem>
            <DropdownMenuItem 
              onClick={() => setFilterMode('guided')}
              className="text-marble-white hover:bg-royal-gold/20 cursor-pointer"
            >
              <Brain className="w-4 h-4 mr-2" />
              Flow Mode
            </DropdownMenuItem>
          </DropdownMenuContent>
        </DropdownMenu>
      </div>

      {/* Results Count */}
      <div className="mb-6">
        <p className="text-marble-white/60 text-sm">
          {filteredPrompts.length} sacred prompt{filteredPrompts.length !== 1 ? 's' : ''} found
        </p>
      </div>

      {/* Archived Prompts Grid */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {filteredPrompts.map((prompt) => (
          <Card 
            key={prompt.id}
            className="bg-marble-white/5 border-royal-gold/20 hover:bg-marble-white/8 hover:border-royal-gold/30 transition-all duration-300 group"
          >
            <div className="p-6">
              {/* Header */}
              <div className="flex items-start justify-between mb-4">
                <div className="flex-1">
                  <h3 className="text-marble-white font-medium mb-2 line-clamp-2">
                    {prompt.title}
                  </h3>
                  <div className="flex items-center space-x-3">
                    <Badge 
                      variant="outline" 
                      className={`text-xs ${
                        prompt.mode === 'direct' 
                          ? 'border-royal-gold/50 text-royal-gold' 
                          : 'border-violet/50 text-violet'
                      }`}
                    >
                      {prompt.mode === 'direct' ? (
                        <>
                          <Zap className="w-3 h-3 mr-1" />
                          Direct Zone
                        </>
                      ) : (
                        <>
                          <Brain className="w-3 h-3 mr-1" />
                          Flow Mode
                        </>
                      )}
                    </Badge>
                    <div className="flex items-center space-x-1 text-marble-white/50 text-xs">
                      <Calendar className="w-3 h-3" />
                      <span>{prompt.date}</span>
                    </div>
                  </div>
                </div>
              </div>

              {/* Original Prompt Preview */}
              <div className="mb-4">
                <p className="text-marble-white/60 text-xs mb-2">Original:</p>
                <p className="text-marble-white/80 text-sm line-clamp-2 bg-temple-black/30 p-3 rounded-lg">
                  {prompt.original}
                </p>
              </div>

              {/* Enhanced Prompt Preview */}
              <div className="mb-6">
                <p className="text-marble-white/60 text-xs mb-2">Enhanced:</p>
                <p className="text-marble-white text-sm line-clamp-3 bg-gradient-to-br from-royal-gold/5 to-electric-blue/5 p-3 rounded-lg border border-royal-gold/10">
                  {prompt.enhanced}
                </p>
              </div>

              {/* Actions */}
              <div className="flex items-center space-x-2">
                <Button
                  onClick={() => handleCopy(prompt.enhanced, prompt.id)}
                  variant="outline"
                  size="sm"
                  className="border-royal-gold/30 text-royal-gold hover:bg-royal-gold/20 flex-1"
                >
                  {copiedId === prompt.id ? (
                    <Check className="w-3 h-3 mr-2" />
                  ) : (
                    <Copy className="w-3 h-3 mr-2" />
                  )}
                  {copiedId === prompt.id ? 'Copied!' : 'Copy Enhanced'}
                </Button>
                
                <Button
                  onClick={() => handleExport(prompt)}
                  variant="outline"
                  size="sm"
                  className="border-electric-blue/30 text-electric-blue hover:bg-electric-blue/20"
                >
                  <Download className="w-3 h-3" />
                </Button>

                {onDeletePrompt && (
                  <Button
                    onClick={() => handleDelete(prompt.id)}
                    variant="outline"
                    size="sm"
                    className="border-soft-red/30 text-soft-red hover:bg-soft-red/20"
                  >
                    <Trash2 className="w-3 h-3" />
                  </Button>
                )}
              </div>
            </div>
          </Card>
        ))}
      </div>

      {filteredPrompts.length === 0 && searchQuery && (
        <div className="text-center py-12">
          <div className="w-16 h-16 bg-royal-gold/10 rounded-full flex items-center justify-center mx-auto mb-4">
            <Search className="w-6 h-6 text-royal-gold/60" />
          </div>
          <h3 className="text-marble-white font-medium mb-2">No matches found</h3>
          <p className="text-marble-white/60">
            Try adjusting your search or filter to find what you're looking for.
          </p>
        </div>
      )}
    </div>
  );
}